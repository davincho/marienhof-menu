import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";

import pdf from "pdf-parse";

const weekdayStrings = [
  "Montag",
  "Dienstag",
  "Mittwoch",
  "Donnerstag",
  "Freitag",
];

const Home: NextPage<{ days: string[][][]; weekDateRange: string }> = ({
  days,
  weekDateRange,
}) => {
  return (
    <div className="container mx-auto p-4">
      <Head>
        <title>🧑🏼‍🍳 Marienhof Menu</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <h1 className="text-3xl text-center">🧑🏼‍🍳 Marienhof Menu 🧑🏼‍🍳</h1>

      <div className="md:w-3/4 mx-auto mt-8">
        <h2>Menü für {weekDateRange}</h2>
        {days.map((day, index) => (
          <div key={index}>
            <h2 className="text-2xl pt-2">{weekdayStrings[index]}</h2>
            {day.map(([name, price], index) => (
              <div key={index} className="flex justify-between">
                <div>{name}</div>
                <div className="ml-2 flex-none text-right">€ {price}</div>
              </div>
            ))}
          </div>
        ))}
      </div>
    </div>
  );
};

export const getServerSideProps: GetServerSideProps = async ({ req, res }) => {
  res.setHeader(
    "Cache-Control",
    "public, s-maxage=10, stale-while-revalidate=59"
  );

  const dataBuffer = await fetch(
    "http://www.restaurant-marienhof.at/restaurant/pdf/wochenmenue.pdf"
  );
  const blobContent = await dataBuffer.arrayBuffer();

  const weekdaysMenu = [];

  const data = (await pdf(Buffer.from(blobContent))) as { text: string };

  let weekdayCount = 0;

  let collector = [];
  let startCollecting = false;
  const lines = data.text
    .split("\n")
    .map((str) => str.trim().replace(/  +/g, " "))
    .filter(Boolean);

  let weekDateRange = "";

  for (const line of lines) {
    const weekdaySearch = weekdayStrings[weekdayCount];

    console.log("line", line);
    if (line.startsWith("Menüplan")) {
      // Date info
      weekDateRange = line.split("Menüplan")[1].replace(/ /g, "").trim();
    } else if (line.replaceAll(" ", "") === weekdaySearch) {
      if (collector.length > 0) {
        weekdaysMenu.push(collector);
      }

      collector = [];
      startCollecting = true;
      weekdayCount++;
    } else if (line.startsWith("V WOCHENEMPFEHLUNG")) {
      weekdaysMenu.push(collector);
      startCollecting = false;
    } else if (startCollecting) {
      collector.push(line);
    }
  }

  // fix some line breaks

  const fixedDays = weekdaysMenu.map((weekday) => {
    let fixedMenutItems = [];

    if (weekday.length > 3) {
      let concatMenu = [];

      for (const menu of weekday) {
        if (menu.indexOf("€") > -1) {
          if (concatMenu.length === 0) {
            fixedMenutItems.push(menu);
          } else {
            concatMenu.push(menu);
            fixedMenutItems.push(concatMenu.join(", "));
            concatMenu = [];
          }
        } else {
          concatMenu.push(menu);
        }
      }
    } else {
      fixedMenutItems = weekday;
    }

    // Now split price apart
    return fixedMenutItems.map((item) =>
      item.split("€").map((item) => item.trim())
    );
  });

  console.log("weekDateRange", weekDateRange);

  return {
    props: { days: fixedDays, weekDateRange },
  };
};

export default Home;
